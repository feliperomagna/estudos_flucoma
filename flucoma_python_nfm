import os
from pathlib import Path

# Adiciona o diretório contendo os binários à variável de ambiente PATH
binaries_dir = '/Users/feliperomagna/Documents/FluidCorpusManipulation/bin'
os.environ["PATH"] += os.pathsep + binaries_dir


###

from pathlib import Path
from flucoma import fluid
from flucoma.utils import get_buffer
from pyo import *

source = Path("5yEo_gS5Eds.wav")

# Pode ser o caso de querer armazenar as saídas de cada processo em um lugar específico
# Ao especificar as saídas, não é necessário retornar nada de um fluid.processor()
resynth = Path("resynth.wav")
activations = Path("activations.wav")
bases = Path("bases.wav")

# Executa o processo de decomposição em fatoração de matriz não-negativa
fluid.nmf(
    source,
    resynth=resynth,
    activations=activations,
    bases=bases,
    components=3,
    iterations=50,
    fftsettings=[256, 128, 256],
)
# Isso enviaria as saídas para a localização no disco
# Que podem então ser referenciadas em outro lugar
# Ou os valores podem ser extraídos para qualquer outra coisa que você deseje fazer (numpy, pandas, dominação global)

activation_values = get_buffer(bases)
print(activation_values)

# O retorno também pode ser passado para algum outro processo
fluid.stats(activations)

# Isso também pode ser útil para o cache do seu processamento.
# Você pode verificar se algo já existe e então pular o reprocesamento para economizar tempo.



############################################PYO



# Inicializa o servidor de áudio do Pyo
s = Server().boot()
s.start()


# snd = SndTable("activations.wav")
# snd.view()
# s.gui()

activation_player = SfPlayer("activations.wav", speed= 0.07, loop=True) #altera a velocidade do arquivo de ativações, deixando-o mais lento por conta do SR. Carrega em um buffer
# Define um oscilador
osc = Sine(freq=330, mul=0.5)


# Define um objeto para modular o oscilador com base nas ativações
modulated_osc = osc * activation_player

# Define a saída de áudio
modulated_osc.out()

# Deixa o script rodando
s.gui(locals())


##tentativa de recriar NMFFilter

# # Define um objeto para reproduzir o arquivo de ativações
# activation_player = SfPlayer("bases.wav", speed= 0.003, loop=True).out() #altera a velocidade do arquivo de ativações, deixando-o mais lento por conta do SR. Carrega em um buffer
# audio_to_process = SfPlayer("/Users/feliperomagna/Library/Mobile Documents/com~apple~CloudDocs/Documents/Pessoais/Doutorado/Doutorado UFMG/Disciplinas/2024/python24/sax_soprano_duet/w6Vraxq69Wo.wav", speed=1, loop=True)

# processed_audio = audio_to_process * activation_player

# processed_audio.out()

# s.gui(locals())
